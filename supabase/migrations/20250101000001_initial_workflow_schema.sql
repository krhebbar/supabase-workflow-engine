-- Supabase Workflow Automation Engine
-- Initial Schema Migration
--
-- This migration creates the core workflow automation tables, types, and functions
-- for database-driven workflow orchestration.

-- =============================================================================
-- ENUMS
-- =============================================================================

-- Workflow execution phase (before/after/now relative to trigger event)
create type "public"."workflow_phase" as enum ('before', 'after', 'now');

-- Workflow action execution status
create type "public"."workflow_status" as enum (
  'not_started',  -- Scheduled but not yet executed
  'processing',   -- Currently executing
  'completed',    -- Successfully finished
  'failed',       -- Execution failed (will retry)
  'stopped'       -- Manually stopped/cancelled
);

-- Workflow type classification
create type "public"."workflow_type" as enum ('system', 'user_defined');

-- Trigger events that can start workflows
create type "public"."workflow_trigger" as enum (
  'user_created',
  'user_updated',
  'user_deleted',
  'record_created',
  'record_updated',
  'scheduled_time',
  'manual_trigger',
  'webhook_received',
  'custom_event'
);

-- Tables that can trigger workflows
create type "public"."trigger_table" as enum (
  'users',
  'records',
  'events',
  'notifications',
  'custom_table'
);

-- =============================================================================
-- TABLES
-- =============================================================================

-- Main workflow definition table
-- Defines the workflow trigger, timing, and metadata
create table "public"."workflow" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),

    -- Workflow identification
    "name" text not null,
    "description" text,
    "workflow_type" workflow_type not null default 'user_defined'::workflow_type,

    -- Trigger configuration
    "trigger" workflow_trigger not null,
    "phase" workflow_phase not null,  -- When to execute relative to trigger
    "interval" numeric not null default '0'::numeric,  -- Delay in minutes

    -- Control flags
    "is_active" boolean not null default true,
    "is_paused" boolean not null default false,

    -- Multi-tenancy
    "organization_id" uuid not null,  -- For multi-tenant isolation

    -- Metadata
    "metadata" jsonb default '{}'::jsonb,

    constraint "workflow_pkey" primary key ("id")
);

-- Workflow action definitions
-- Defines individual steps/actions within a workflow
create table "public"."workflow_action" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),

    -- Relationship to parent workflow
    "workflow_id" uuid not null,

    -- Action configuration
    "order" numeric not null,  -- Execution order within workflow
    "action_type" text not null,  -- Type of action (email, webhook, function, etc.)
    "target_endpoint" text,  -- HTTP endpoint or function name
    "payload" jsonb not null default '{}'::jsonb,  -- Action-specific configuration

    -- Conditional execution
    "condition" jsonb,  -- Optional condition for executing this action

    -- Metadata
    "metadata" jsonb default '{}'::jsonb,

    constraint "workflow_action_pkey" primary key ("id"),
    constraint "workflow_action_workflow_id_fkey"
        foreign key ("workflow_id")
        references "public"."workflow"("id")
        on delete cascade
);

-- Workflow execution logs
-- Tracks each execution of a workflow action with state and retry information
create table "public"."workflow_action_logs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "started_at" timestamp with time zone,
    "completed_at" timestamp with time zone,
    "execute_at" timestamp with time zone not null,  -- When this should execute

    -- Workflow references
    "workflow_id" uuid not null,
    "workflow_action_id" uuid not null,

    -- Execution tracking
    "status" workflow_status not null default 'not_started'::workflow_status,
    "tries" numeric not null default '0'::numeric,  -- Number of execution attempts
    "error_message" text,  -- Last error if failed

    -- Trigger context
    "related_table" trigger_table not null,  -- Table that triggered this workflow
    "related_table_pkey" uuid not null,  -- Primary key of triggering record
    "meta" jsonb,  -- Context data from trigger event

    constraint "workflow_action_logs_pkey" primary key ("id"),
    constraint "workflow_action_logs_workflow_id_fkey"
        foreign key ("workflow_id")
        references "public"."workflow"("id")
        on delete cascade,
    constraint "workflow_action_logs_workflow_action_id_fkey"
        foreign key ("workflow_action_id")
        references "public"."workflow_action"("id")
        on delete cascade
);

-- =============================================================================
-- INDEXES
-- =============================================================================

-- Optimize queries by workflow ID
create index "workflow_action_workflow_id_idx"
    on "public"."workflow_action" using btree ("workflow_id");

-- Optimize log queries by workflow and action
create index "workflow_action_logs_workflow_id_idx"
    on "public"."workflow_action_logs" using btree ("workflow_id");

create index "workflow_action_logs_workflow_action_id_idx"
    on "public"."workflow_action_logs" using btree ("workflow_action_id");

-- Critical index for cron job to find pending actions
create index "workflow_action_logs_pending_idx"
    on "public"."workflow_action_logs" using btree ("status", "execute_at")
    where status = 'not_started';

-- Optimize queries by related table
create index "workflow_action_logs_related_table_idx"
    on "public"."workflow_action_logs" using btree ("related_table", "related_table_pkey");

-- =============================================================================
-- FUNCTIONS
-- =============================================================================

-- Cron function that processes pending workflow actions
-- This function is called periodically (e.g., every minute) to execute scheduled workflows
create or replace function public.workflow_action_log_cron()
returns boolean
language plpgsql
as $$
declare
    url_x text;
    headers_x jsonb;
    wa_record record;
begin
    -- Get the application URL from Supabase Vault (secure secret storage)
    -- In production, you'd store your app URL as a secret
    select decrypted_secret
    into url_x
    from vault.decrypted_secrets
    where name = 'APP_URL';

    -- Construct the webhook URL for workflow execution
    url_x := concat(url_x, '/api/workflow-cron');

    -- Set HTTP headers for the webhook request
    headers_x := '{"Content-Type": "application/json"}'::jsonb;

    -- Process all pending workflow actions that are due for execution
    for wa_record in
        select
            json_build_object(
                'id', w_a_l.id,
                'workflow_id', w_a_l.workflow_id,
                'workflow_action_id', w_a_l.workflow_action_id,
                'meta', w_a_l.meta,
                'payload', w_a.payload,
                'execution_time', w_a_l.execute_at,
                'action_type', w_a.action_type,
                'target_endpoint', w_a.target_endpoint
            ) as body,
            w_a_l.id as id,
            w_a_l.tries as tries
        from workflow_action_logs w_a_l
        join workflow_action w_a on w_a_l.workflow_action_id = w_a.id
        join workflow w on w_a_l.workflow_id = w.id
        where
            -- Only process actions that haven't started yet
            w_a_l.status = 'not_started'
            -- And are scheduled to run within the next minute
            and w_a_l.execute_at < current_timestamp + interval '1 minute'
            -- And parent workflow is active
            and w.is_active = true
            and w.is_paused = false
    loop
        -- Make HTTP POST request to application endpoint
        -- The application handles the actual workflow logic
        perform net.http_post(
            url := url_x,
            headers := headers_x,
            body := wa_record.body::jsonb
        );

        -- Update log entry to mark as processing
        -- Increment retry counter
        update workflow_action_logs
        set
            status = 'processing',
            tries = wa_record.tries + 1,
            started_at = now()
        where id = wa_record.id;
    end loop;

    return true;
end;
$$;

-- Function to update the updated_at timestamp
create or replace function public.update_updated_at_column()
returns trigger
language plpgsql
as $$
begin
    new.updated_at = now();
    return new;
end;
$$;

-- =============================================================================
-- TRIGGERS
-- =============================================================================

-- Auto-update updated_at timestamp on workflow table
create trigger update_workflow_updated_at before update on public.workflow
    for each row execute procedure public.update_updated_at_column();

-- Auto-update updated_at timestamp on workflow_action table
create trigger update_workflow_action_updated_at before update on public.workflow_action
    for each row execute procedure public.update_updated_at_column();

-- =============================================================================
-- COMMENTS
-- =============================================================================

comment on table public.workflow is 'Workflow definitions - contains the trigger events and execution timing';
comment on table public.workflow_action is 'Individual actions within a workflow - executed in order';
comment on table public.workflow_action_logs is 'Execution logs for workflow actions - tracks state and retries';
comment on function public.workflow_action_log_cron() is 'Cron function that processes pending workflow actions by calling application webhooks';
